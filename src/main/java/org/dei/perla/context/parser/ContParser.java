/* Generated By:JavaCC: Do not edit this line. ContParser.java */
package org.dei.perla.context.parser;

import java.util.Collections;
import java.util.List;
import java.util.ArrayList;

import org.dei.perla.core.fpc.DataType;
import org.dei.perla.context.*;
import org.dei.perla.lang.parser.*;
import org.dei.perla.lang.parser.ast.*;
import org.dei.perla.lang.query.expression.*;

public final class ContParser implements ContParserConstants {

        private String getPosition(Token t) {
            return "line " + t.beginLine + ", column " + t.beginColumn;
        }

/*
 * PRODUCTION
 */
  final public Context CreateContext(ParserContext ctx) throws ParseException {
    String name;
    List<ContextElement> elements = new ArrayList<ContextElement>();
    jj_consume_token(KEYWORD_CREATE);
    jj_consume_token(KEYWORD_CONTEXT);
    name = Identifier();
    elements = ActiveIfClause(ctx);
      {if (true) return new Context(name, elements);}
    throw new Error("Missing return statement in function");
  }

/*
 * ACTIVE IF CLAUSE
 */
  final public List<ContextElement> ActiveIfClause(ParserContext ctx) throws ParseException {
    List<ContextElement> elements = new ArrayList<ContextElement>();
    ContextElement c;
    jj_consume_token(KEYWORD_ACTIVE);
    jj_consume_token(KEYWORD_IF);
    if (jj_2_1(2)) {
      c = CreateContextElement(ctx);
    } else if (jj_2_2(2)) {
      c = CreateContextElemAtt(ctx);
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
        elements.add(c);
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case OPERATOR_AND:
        ;
        break;
      default:
        jj_la1[0] = jj_gen;
        break label_1;
      }
      jj_consume_token(OPERATOR_AND);
      if (jj_2_3(2)) {
        c = CreateContextElement(ctx);
      } else if (jj_2_4(2)) {
        c = CreateContextElemAtt(ctx);
      } else {
        jj_consume_token(-1);
        throw new ParseException();
      }
          elements.add(c);
    }
    jj_consume_token(0);
      {if (true) return elements;}
    throw new Error("Missing return statement in function");
  }

/*
 * CREATE SIMPLE CONTEXT ELEMENT Dimension = Concept
 */
  final public ContextElement CreateContextElement(ParserContext ctx) throws ParseException {
    String dimension;
    String concept;
    dimension = Identifier();
    jj_consume_token(OPERATOR_EQUAL);
    concept = Identifier();
      {if (true) return ContextElemSimple.create(dimension, concept, ctx);}
    throw new Error("Missing return statement in function");
  }

/*
 * CREATE CONTEXT ELEMENT Dimension.attribute OP value
 */
  final public ContextElement CreateContextElemAtt(ParserContext ctx) throws ParseException {
  String dimension;
  String attribute = " ";
  ExpressionAST e;
    dimension = Identifier();
    jj_consume_token(KEYWORD_DOT);
          attribute = getToken(1).image;
    e = Expression(ExpressionType.SIMPLE, "context element", ctx);
          {if (true) return ContextElemAtt.create(dimension, attribute, e, ctx);}
    throw new Error("Missing return statement in function");
  }

/*
 * SIGNS, CONSTANTS, VALUES, ETC.
 */
  final public Sign Sign() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case OPERATOR_PLUS:
      jj_consume_token(OPERATOR_PLUS);
      {if (true) return Sign.PLUS;}
      break;
    case OPERATOR_MINUS:
      jj_consume_token(OPERATOR_MINUS);
      {if (true) return Sign.MINUS;}
      break;
    default:
      jj_la1[1] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public LogicValue ConstantBoolean() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case CONSTANT_BOOLEAN_TRUE:
      jj_consume_token(CONSTANT_BOOLEAN_TRUE);
          {if (true) return LogicValue.TRUE;}
      break;
    case CONSTANT_BOOLEAN_FALSE:
      jj_consume_token(CONSTANT_BOOLEAN_FALSE);
          {if (true) return LogicValue.FALSE;}
      break;
    default:
      jj_la1[2] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public float ConstantFloat() throws ParseException {
    Token value;
    value = jj_consume_token(CONSTANT_FLOAT);
      {if (true) return Float.parseFloat(value.image);}
    throw new Error("Missing return statement in function");
  }

  final public int ConstantInteger() throws ParseException {
    Token value;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case CONSTANT_INTEGER_10:
      value = jj_consume_token(CONSTANT_INTEGER_10);
      {if (true) return Integer.parseInt(value.image);}
      break;
    case CONSTANT_INTEGER_16:
      value = jj_consume_token(CONSTANT_INTEGER_16);
      {if (true) return Integer.parseInt(value.image.substring(2), 16);}
      break;
    default:
      jj_la1[3] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public String ConstantString() throws ParseException {
    Token value;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case CONSTANT_SINGLE_QUOTED_STRING_START:
      jj_consume_token(CONSTANT_SINGLE_QUOTED_STRING_START);
      value = jj_consume_token(CONSTANT_SINGLE_QUOTED_STRING_VALUE);
      jj_consume_token(CONSTANT_SINGLE_QUOTED_STRING_END);
      break;
    case CONSTANT_DOUBLE_QUOTED_STRING_START:
      jj_consume_token(CONSTANT_DOUBLE_QUOTED_STRING_START);
      value = jj_consume_token(CONSTANT_DOUBLE_QUOTED_STRING_VALUE);
      jj_consume_token(CONSTANT_DOUBLE_QUOTED_STRING_END);
      break;
    default:
      jj_la1[4] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
      {if (true) return value.image;}
    throw new Error("Missing return statement in function");
  }

  final public ConstantAST Constant() throws ParseException {
    Object value;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case CONSTANT_BOOLEAN_TRUE:
    case CONSTANT_BOOLEAN_FALSE:
      value = ConstantBoolean();
          {if (true) return new ConstantAST(token, DataType.BOOLEAN, value);}
      break;
    case CONSTANT_SINGLE_QUOTED_STRING_START:
    case CONSTANT_DOUBLE_QUOTED_STRING_START:
      value = ConstantString();
          {if (true) return new ConstantAST(token, DataType.STRING, value);}
      break;
    case CONSTANT_INTEGER_10:
    case CONSTANT_INTEGER_16:
      value = ConstantInteger();
          {if (true) return new ConstantAST(token, DataType.INTEGER, value);}
      break;
    case CONSTANT_FLOAT:
      value = ConstantFloat();
          {if (true) return new ConstantAST(token, DataType.FLOAT, value);}
      break;
    default:
      jj_la1[5] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public ComparisonOperation ComparisonOperation() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case OPERATOR_GREATER:
      jj_consume_token(OPERATOR_GREATER);
      {if (true) return ComparisonOperation.GT;}
      break;
    case OPERATOR_LESS:
      jj_consume_token(OPERATOR_LESS);
      {if (true) return ComparisonOperation.LT;}
      break;
    case OPERATOR_GREATER_EQUAL:
      jj_consume_token(OPERATOR_GREATER_EQUAL);
      {if (true) return ComparisonOperation.GE;}
      break;
    case OPERATOR_LESS_EQUAL:
      jj_consume_token(OPERATOR_LESS_EQUAL);
      {if (true) return ComparisonOperation.LE;}
      break;
    case OPERATOR_EQUAL:
      jj_consume_token(OPERATOR_EQUAL);
      {if (true) return ComparisonOperation.EQ;}
      break;
    case OPERATOR_NOT_EQUAL:
      jj_consume_token(OPERATOR_NOT_EQUAL);
      {if (true) return ComparisonOperation.NE;}
      break;
    default:
      jj_la1[6] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public String Identifier() throws ParseException {
    Token value;
    value = jj_consume_token(IDENTIFIER);
      {if (true) return value.image;}
    throw new Error("Missing return statement in function");
  }

/*
 * EXPRESSIONS
 */
  final public ExpressionAST Expression(ExpressionType type, String src, ParserContext ctx) throws ParseException {
    ExpressionAST e1;
    ExpressionAST e2;

    Token t;
    e1 = BooleanFactor(type, src, ctx);
    label_2:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case OPERATOR_OR:
        ;
        break;
      default:
        jj_la1[7] = jj_gen;
        break label_2;
      }
      t = jj_consume_token(OPERATOR_OR);
      e2 = BooleanFactor(type, src, ctx);
          e1 = new BoolAST(t, BoolOperation.OR, e1, e2);
    }
      {if (true) return e1;}
    throw new Error("Missing return statement in function");
  }

  final public ExpressionAST BooleanFactor(ExpressionType type, String src, ParserContext ctx) throws ParseException {
    ExpressionAST e1;
    ExpressionAST e2;

    Token t;
    e1 = BooleanNegation(type, src, ctx);
    label_3:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case OPERATOR_XOR:
        ;
        break;
      default:
        jj_la1[8] = jj_gen;
        break label_3;
      }
      t = jj_consume_token(OPERATOR_XOR);
      e2 = BooleanNegation(type, src, ctx);
          e1 = new BoolAST(t, BoolOperation.XOR, e1, e2);
    }
      {if (true) return e1;}
    throw new Error("Missing return statement in function");
  }

  final public ExpressionAST BooleanNegation(ExpressionType type, String src, ParserContext ctx) throws ParseException {
    ExpressionAST e;
    boolean invert = false;

    Token t = null;
    label_4:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case OPERATOR_NOT:
        ;
        break;
      default:
        jj_la1[9] = jj_gen;
        break label_4;
      }
      t = jj_consume_token(OPERATOR_NOT);
            invert = !invert;
    }
    e = BooleanPredicate(type, src, ctx);
        if (invert) {
            e = new NotAST(t, e);
        }
        {if (true) return e;}
    throw new Error("Missing return statement in function");
  }

  final public ExpressionAST BooleanPredicate(ExpressionType type, String src, ParserContext ctx) throws ParseException {
    ExpressionAST e;
    e = Comparison(type, src, ctx);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case KEYWORD_IS:
    case KEYWORD_BETWEEN:
    case KEYWORD_LIKE:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case KEYWORD_IS:
        e = Is(e);
        break;
      case KEYWORD_LIKE:
        e = Like(e);
        break;
      case KEYWORD_BETWEEN:
        e = Between(e, type, src, ctx);
        break;
      default:
        jj_la1[10] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
    default:
      jj_la1[11] = jj_gen;
      ;
    }
      {if (true) return e;}
    throw new Error("Missing return statement in function");
  }

  final public ExpressionAST Is(ExpressionAST e) throws ParseException {
    boolean invert = false;
    ExpressionAST is;

    Token t;
    t = jj_consume_token(KEYWORD_IS);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case OPERATOR_NOT:
      jj_consume_token(OPERATOR_NOT);
          invert = true;
      break;
    default:
      jj_la1[12] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case CONSTANT_BOOLEAN_TRUE:
      jj_consume_token(CONSTANT_BOOLEAN_TRUE);
          is = new IsAST(t, e, LogicValue.TRUE);
      break;
    case CONSTANT_BOOLEAN_FALSE:
      jj_consume_token(CONSTANT_BOOLEAN_FALSE);
          is = new IsAST(t, e, LogicValue.FALSE);
      break;
    case CONSTANT_BOOLEAN_UNKNOWN:
      jj_consume_token(CONSTANT_BOOLEAN_UNKNOWN);
          is = new IsAST(t, e, LogicValue.UNKNOWN);
      break;
    case CONSTANT_NULL:
      jj_consume_token(CONSTANT_NULL);
          is = new IsNullAST(t, e);
      break;
    default:
      jj_la1[13] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
        if (invert) {
            is = new NotAST(t, is);
        }
        {if (true) return is;}
    throw new Error("Missing return statement in function");
  }

  final public ExpressionAST Like(ExpressionAST e) throws ParseException {
    String pattern;
    Expression like;

    Token t;
    t = jj_consume_token(KEYWORD_LIKE);
    pattern = ConstantString();
      {if (true) return new LikeAST(t, e, pattern);}
    throw new Error("Missing return statement in function");
  }

  final public ExpressionAST Between(ExpressionAST e, ExpressionType type,
        String src, ParserContext ctx) throws ParseException {
    ExpressionAST b;
    ExpressionAST min;
    ExpressionAST max;

    Token t;
    t = jj_consume_token(KEYWORD_BETWEEN);
    min = BitwiseExpression(type, src, ctx);
    jj_consume_token(OPERATOR_AND);
    max = BitwiseExpression(type, src, ctx);
        {if (true) return new BetweenAST(t, e, min, max);}
    throw new Error("Missing return statement in function");
  }

  final public ExpressionAST Comparison(ExpressionType type, String src, ParserContext ctx) throws ParseException {
    ExpressionAST e1;
    ExpressionAST e2;
    ComparisonOperation op;

    Token t;
    e1 = BitwiseExpression(type, src, ctx);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case OPERATOR_GREATER:
    case OPERATOR_LESS:
    case OPERATOR_GREATER_EQUAL:
    case OPERATOR_LESS_EQUAL:
    case OPERATOR_EQUAL:
    case OPERATOR_NOT_EQUAL:
      op = ComparisonOperation();
          t = token;
      e2 = BitwiseExpression(type, src, ctx);
            e1 = new ComparisonAST(t, op, e1, e2);
      break;
    default:
      jj_la1[14] = jj_gen;
      ;
    }
      {if (true) return e1;}
    throw new Error("Missing return statement in function");
  }

  final public ExpressionAST BitwiseExpression(ExpressionType type, String src, ParserContext ctx) throws ParseException {
    ExpressionAST e1;
    ExpressionAST e2;

    Token t;
    e1 = BitwiseTerm(type, src, ctx);
    label_5:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case OPERATOR_BITWISE_OR:
        ;
        break;
      default:
        jj_la1[15] = jj_gen;
        break label_5;
      }
      t = jj_consume_token(OPERATOR_BITWISE_OR);
      e2 = BitwiseTerm(type, src, ctx);
          e1 = new BitwiseAST(t, BitwiseOperation.OR, e1, e2);
    }
      {if (true) return e1;}
    throw new Error("Missing return statement in function");
  }

  final public ExpressionAST BitwiseTerm(ExpressionType type, String src, ParserContext ctx) throws ParseException {
    ExpressionAST e1;
    ExpressionAST e2;

    Token t;
    e1 = BitwiseFactor(type, src, ctx);
    label_6:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case OPERATOR_BITWISE_AND:
        ;
        break;
      default:
        jj_la1[16] = jj_gen;
        break label_6;
      }
      t = jj_consume_token(OPERATOR_BITWISE_AND);
      e2 = BitwiseFactor(type, src, ctx);
          e1 = new BitwiseAST(t, BitwiseOperation.AND, e1, e2);
    }
      {if (true) return e1;}
    throw new Error("Missing return statement in function");
  }

  final public ExpressionAST BitwiseFactor(ExpressionType type, String src, ParserContext ctx) throws ParseException {
    ExpressionAST e1;
    ExpressionAST e2;

    Token t;
    e1 = BitwiseShift(type, src, ctx);
    label_7:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case OPERATOR_BITWISE_XOR:
        ;
        break;
      default:
        jj_la1[17] = jj_gen;
        break label_7;
      }
      t = jj_consume_token(OPERATOR_BITWISE_XOR);
      e2 = BitwiseShift(type, src, ctx);
          e1 = new BitwiseAST(t, BitwiseOperation.XOR, e1, e2);
    }
      {if (true) return e1;}
    throw new Error("Missing return statement in function");
  }

  final public ExpressionAST BitwiseShift(ExpressionType type, String src, ParserContext ctx) throws ParseException {
    ExpressionAST e1;
    ExpressionAST e2;
    BitwiseOperation op;

    Token t;
    e1 = BitwiseNegation(type, src, ctx);
    label_8:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case OPERATOR_BITWISE_LSH:
      case OPERATOR_BITWISE_RSH:
        ;
        break;
      default:
        jj_la1[18] = jj_gen;
        break label_8;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case OPERATOR_BITWISE_LSH:
        t = jj_consume_token(OPERATOR_BITWISE_LSH);
              op = BitwiseOperation.LSH;
        break;
      case OPERATOR_BITWISE_RSH:
        t = jj_consume_token(OPERATOR_BITWISE_RSH);
              op = BitwiseOperation.RSH;
        break;
      default:
        jj_la1[19] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      e2 = BitwiseNegation(type, src, ctx);
          e1 = new BitwiseAST(t, op, e1, e2);
    }
      {if (true) return e1;}
    throw new Error("Missing return statement in function");
  }

  final public ExpressionAST BitwiseNegation(ExpressionType type, String src, ParserContext ctx) throws ParseException {
    ExpressionAST e;
    boolean not = false;

    Token t = null;
    label_9:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case OPERATOR_BITWISE_NOT:
        ;
        break;
      default:
        jj_la1[20] = jj_gen;
        break label_9;
      }
      t = jj_consume_token(OPERATOR_BITWISE_NOT);
          not = !not;
    }
    e = ArithmeticExpression(type, src, ctx);
        if (not) {
            e = new BitwiseNotAST(t, e);
        }
        {if (true) return e;}
    throw new Error("Missing return statement in function");
  }

  final public ExpressionAST ArithmeticExpression(ExpressionType type, String src, ParserContext ctx) throws ParseException {
    ExpressionAST e1;
    ExpressionAST e2;
    ArithmeticOperation op;

    Token t;
    e1 = ArithmeticTerm(type, src, ctx);
    label_10:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case OPERATOR_PLUS:
      case OPERATOR_MINUS:
        ;
        break;
      default:
        jj_la1[21] = jj_gen;
        break label_10;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case OPERATOR_PLUS:
        t = jj_consume_token(OPERATOR_PLUS);
              op = ArithmeticOperation.ADDITION;
        break;
      case OPERATOR_MINUS:
        t = jj_consume_token(OPERATOR_MINUS);
              op = ArithmeticOperation.SUBTRACTION;
        break;
      default:
        jj_la1[22] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      e2 = ArithmeticTerm(type, src, ctx);
          e1 = new ArithmeticAST(t, op, e1, e2);
    }
      {if (true) return e1;}
    throw new Error("Missing return statement in function");
  }

  final public ExpressionAST ArithmeticTerm(ExpressionType type, String src, ParserContext ctx) throws ParseException {
    ExpressionAST e1;
    ExpressionAST e2;
    ArithmeticOperation op;

    Token t;
    e1 = ArithmeticFactor(type, src, ctx);
    label_11:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case OPERATOR_MULTIPLY:
      case OPERATOR_DIVIDE:
      case OPERATOR_MODULO:
        ;
        break;
      default:
        jj_la1[23] = jj_gen;
        break label_11;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case OPERATOR_MULTIPLY:
        t = jj_consume_token(OPERATOR_MULTIPLY);
              op = ArithmeticOperation.PRODUCT;
        break;
      case OPERATOR_DIVIDE:
        t = jj_consume_token(OPERATOR_DIVIDE);
              op = ArithmeticOperation.DIVISION;
        break;
      case OPERATOR_MODULO:
        t = jj_consume_token(OPERATOR_MODULO);
              op = ArithmeticOperation.MODULO;
        break;
      default:
        jj_la1[24] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      e2 = ArithmeticFactor(type, src, ctx);
          e1 = new ArithmeticAST(t, op, e1, e2);
    }
      {if (true) return e1;}
    throw new Error("Missing return statement in function");
  }

  final public ExpressionAST ArithmeticFactor(ExpressionType type, String src, ParserContext ctx) throws ParseException {
    ExpressionAST e;
    Sign s = Sign.PLUS;

    Token t = null;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case OPERATOR_PLUS:
    case OPERATOR_MINUS:
      s = Sign();
          t = token;
      break;
    default:
      jj_la1[25] = jj_gen;
      ;
    }
    e = PrimaryExpression(type, src, ctx);
        if (s == Sign.MINUS) {
            e = new InverseAST(t, e);
        }
        {if (true) return e;}
    throw new Error("Missing return statement in function");
  }

  final public ExpressionAST PrimaryExpression(ExpressionType type, String src, ParserContext ctx) throws ParseException {
    ExpressionAST e;

    Token t = null;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case CONSTANT_BOOLEAN_TRUE:
    case CONSTANT_BOOLEAN_FALSE:
    case CONSTANT_INTEGER_10:
    case CONSTANT_INTEGER_16:
    case CONSTANT_FLOAT:
    case CONSTANT_SINGLE_QUOTED_STRING_START:
    case CONSTANT_DOUBLE_QUOTED_STRING_START:
      e = Constant();
      {if (true) return e;}
      break;
    case 64:
      jj_consume_token(64);
      e = Expression(type, src, ctx);
          {if (true) return e;}
      jj_consume_token(65);
      break;
    case IDENTIFIER:
      t = getToken(1);
      e = AttributeReference();
        if (type == ExpressionType.CONSTANT) {
            ctx.addError("Only constant expressions are allowed in " + src +
                " at " + getPosition(t));
            {if (true) return ConstantAST.NULL;}
        } else {
            {if (true) return e;}
        }
      break;
    default:
      jj_la1[26] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public AttributeReferenceAST AttributeReference() throws ParseException {
    String id;
    DataType type = DataType.ANY;

    Token t;
    id = Identifier();
      t = token;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 66:
      jj_consume_token(66);
      type = Type();
      break;
    default:
      jj_la1[27] = jj_gen;
      ;
    }
      {if (true) return new AttributeReferenceAST(token, id, type);}
    throw new Error("Missing return statement in function");
  }

  final public DataType Type() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case TYPE_ID:
      jj_consume_token(TYPE_ID);
      {if (true) return DataType.ID;}
      break;
    case TYPE_TIMESTAMP:
      jj_consume_token(TYPE_TIMESTAMP);
      {if (true) return DataType.TIMESTAMP;}
      break;
    case TYPE_BOOLEAN:
      jj_consume_token(TYPE_BOOLEAN);
      {if (true) return DataType.BOOLEAN;}
      break;
    case TYPE_INTEGER:
      jj_consume_token(TYPE_INTEGER);
      {if (true) return DataType.INTEGER;}
      break;
    case TYPE_FLOAT:
      jj_consume_token(TYPE_FLOAT);
      {if (true) return DataType.FLOAT;}
      break;
    case TYPE_STRING:
      jj_consume_token(TYPE_STRING);
      {if (true) return DataType.STRING;}
      break;
    case TYPE_ANY:
      jj_consume_token(TYPE_ANY);
      {if (true) return DataType.ANY;}
      break;
    default:
      jj_la1[28] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public String RemoveContext() throws ParseException {
  String name;
    jj_consume_token(KEYWORD_DROP);
    jj_consume_token(KEYWORD_CONTEXT);
    name = Identifier();
      {if (true) return name;}
    throw new Error("Missing return statement in function");
  }

  final public String ChangeContext() throws ParseException {
  String name;
    jj_consume_token(KEYWORD_ALTER);
    jj_consume_token(KEYWORD_CONTEXT);
    name = Identifier();
      {if (true) return name;}
    throw new Error("Missing return statement in function");
  }

  private boolean jj_2_1(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  private boolean jj_2_2(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_2(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(1, xla); }
  }

  private boolean jj_2_3(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_3(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(2, xla); }
  }

  private boolean jj_2_4(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_4(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(3, xla); }
  }

  private boolean jj_3_2() {
    if (jj_3R_13()) return true;
    return false;
  }

  private boolean jj_3_3() {
    if (jj_3R_12()) return true;
    return false;
  }

  private boolean jj_3R_13() {
    if (jj_3R_14()) return true;
    if (jj_scan_token(KEYWORD_DOT)) return true;
    return false;
  }

  private boolean jj_3_4() {
    if (jj_3R_13()) return true;
    return false;
  }

  private boolean jj_3R_12() {
    if (jj_3R_14()) return true;
    if (jj_scan_token(OPERATOR_EQUAL)) return true;
    return false;
  }

  private boolean jj_3R_14() {
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  private boolean jj_3_1() {
    if (jj_3R_12()) return true;
    return false;
  }

  /** Generated Token Manager. */
  public ContParserTokenManager token_source;
  SimpleCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private Token jj_scanpos, jj_lastpos;
  private int jj_la;
  private int jj_gen;
  final private int[] jj_la1 = new int[29];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static private int[] jj_la1_2;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
      jj_la1_init_2();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x2000000,0x600000,0x0,0x0,0x0,0x0,0x0,0x4000000,0x1000000,0x800000,0x38000,0x38000,0x800000,0x0,0x0,0x0,0x80000000,0x40000000,0x30000000,0x30000000,0x8000000,0x600000,0x600000,0x1c0000,0x1c0000,0x600000,0x0,0x0,0x0,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x0,0x0,0x18000,0xc0000,0x600000,0x7d8000,0x7e,0x0,0x0,0x0,0x0,0x0,0x0,0x3c000,0x7e,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x807d8000,0x0,0x3f80,};
   }
   private static void jj_la1_init_2() {
      jj_la1_2 = new int[] {0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x4,0x0,};
   }
  final private JJCalls[] jj_2_rtns = new JJCalls[4];
  private boolean jj_rescan = false;
  private int jj_gc = 0;

  /** Constructor with InputStream. */
  public ContParser(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public ContParser(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new ContParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 29; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 29; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor. */
  public ContParser(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new ContParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 29; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 29; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor with generated Token Manager. */
  public ContParser(ContParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 29; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(ContParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 29; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) c.first = null;
            c = c.next;
          }
        }
      }
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  static private final class LookaheadSuccess extends java.lang.Error { }
  final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }


/** Get the next Token. */
  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;
  private int[] jj_lasttokens = new int[100];
  private int jj_endpos;

  private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) return;
    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];
      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }
      jj_entries_loop: for (java.util.Iterator<?> it = jj_expentries.iterator(); it.hasNext();) {
        int[] oldentry = (int[])(it.next());
        if (oldentry.length == jj_expentry.length) {
          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              continue jj_entries_loop;
            }
          }
          jj_expentries.add(jj_expentry);
          break jj_entries_loop;
        }
      }
      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
    }
  }

  /** Generate ParseException. */
  public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[67];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 29; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
          if ((jj_la1_2[i] & (1<<j)) != 0) {
            la1tokens[64+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 67; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

  private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 4; i++) {
    try {
      JJCalls p = jj_2_rtns[i];
      do {
        if (p.gen > jj_gen) {
          jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
          switch (i) {
            case 0: jj_3_1(); break;
            case 1: jj_3_2(); break;
            case 2: jj_3_3(); break;
            case 3: jj_3_4(); break;
          }
        }
        p = p.next;
      } while (p != null);
      } catch(LookaheadSuccess ls) { }
    }
    jj_rescan = false;
  }

  private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }
    p.gen = jj_gen + xla - jj_la; p.first = token; p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

}
